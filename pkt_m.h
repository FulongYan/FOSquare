//
// Generated file, do not edit! Created by nedtool 4.6 from pkt.msg.
//

#ifndef _PKT_M_H_
#define _PKT_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>pkt.msg:19</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet pkt
 * {
 *     int src_Server;
 *     int dst_Server;
 * 
 *     int src_ToR;
 *     int dst_ToR;
 * 
 *     int index;
 * 
 *     int TotalHopCount; // the direct ToR is 1
 *     int HopCountNow;
 *     int Hop[8];
 * //    int src_AGG;
 * //    int dst_AGG;
 * //    int core;
 * 
 * 
 *     //	int Agre[];
 *     //	int Core[];
 *     int PacketSize;
 *     int no;
 *     int m;
 * 
 *     int retransmission;
 *     //    double st_AGG;
 *     int path;
 * 
 *     int TxIndex;
 *     int GroupToRIndex;
 *     double End2EndStartTime;
 * 
 *     simtime_t PacketNetworkStartTime;
 *     simtime_t PacketEnd2EndStartTime;
 *     int flag_intraToR;
 * 
 *     int flag_ToR2ToR;
 * 
 *     int optNum;
 * 
 *     int flag_last;
 * 
 *     int flag_app;
 *     int app_pkt_num;
 * }
 * </pre>
 */
class pkt : public ::cPacket
{
  protected:
    int src_Server_var;
    int dst_Server_var;
    int src_ToR_var;
    int dst_ToR_var;
    int index_var;
    int TotalHopCount_var;
    int HopCountNow_var;
    int Hop_var[8];
    int PacketSize_var;
    int no_var;
    int m_var;
    int retransmission_var;
    int path_var;
    int TxIndex_var;
    int GroupToRIndex_var;
    double End2EndStartTime_var;
    simtime_t PacketNetworkStartTime_var;
    simtime_t PacketEnd2EndStartTime_var;
    int flag_intraToR_var;
    int flag_ToR2ToR_var;
    int optNum_var;
    int flag_last_var;
    int flag_app_var;
    int app_pkt_num_var;

  private:
    void copy(const pkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const pkt&);

  public:
    pkt(const char *name=NULL, int kind=0);
    pkt(const pkt& other);
    virtual ~pkt();
    pkt& operator=(const pkt& other);
    virtual pkt *dup() const {return new pkt(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getSrc_Server() const;
    virtual void setSrc_Server(int src_Server);
    virtual int getDst_Server() const;
    virtual void setDst_Server(int dst_Server);
    virtual int getSrc_ToR() const;
    virtual void setSrc_ToR(int src_ToR);
    virtual int getDst_ToR() const;
    virtual void setDst_ToR(int dst_ToR);
    virtual int getIndex() const;
    virtual void setIndex(int index);
    virtual int getTotalHopCount() const;
    virtual void setTotalHopCount(int TotalHopCount);
    virtual int getHopCountNow() const;
    virtual void setHopCountNow(int HopCountNow);
    virtual unsigned int getHopArraySize() const;
    virtual int getHop(unsigned int k) const;
    virtual void setHop(unsigned int k, int Hop);
    virtual int getPacketSize() const;
    virtual void setPacketSize(int PacketSize);
    virtual int getNo() const;
    virtual void setNo(int no);
    virtual int getM() const;
    virtual void setM(int m);
    virtual int getRetransmission() const;
    virtual void setRetransmission(int retransmission);
    virtual int getPath() const;
    virtual void setPath(int path);
    virtual int getTxIndex() const;
    virtual void setTxIndex(int TxIndex);
    virtual int getGroupToRIndex() const;
    virtual void setGroupToRIndex(int GroupToRIndex);
    virtual double getEnd2EndStartTime() const;
    virtual void setEnd2EndStartTime(double End2EndStartTime);
    virtual simtime_t getPacketNetworkStartTime() const;
    virtual void setPacketNetworkStartTime(simtime_t PacketNetworkStartTime);
    virtual simtime_t getPacketEnd2EndStartTime() const;
    virtual void setPacketEnd2EndStartTime(simtime_t PacketEnd2EndStartTime);
    virtual int getFlag_intraToR() const;
    virtual void setFlag_intraToR(int flag_intraToR);
    virtual int getFlag_ToR2ToR() const;
    virtual void setFlag_ToR2ToR(int flag_ToR2ToR);
    virtual int getOptNum() const;
    virtual void setOptNum(int optNum);
    virtual int getFlag_last() const;
    virtual void setFlag_last(int flag_last);
    virtual int getFlag_app() const;
    virtual void setFlag_app(int flag_app);
    virtual int getApp_pkt_num() const;
    virtual void setApp_pkt_num(int app_pkt_num);
};

inline void doPacking(cCommBuffer *b, pkt& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, pkt& obj) {obj.parsimUnpack(b);}


#endif // ifndef _PKT_M_H_

